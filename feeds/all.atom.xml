<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pakhuncho Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2020-09-15T13:00:00+09:00</updated><subtitle>システムを売らないシステム屋</subtitle><entry><title>担当エンジニアがいなくなってしまった</title><link href="/dan-dang-enziniagainakunatsuteshimatsuta.html" rel="alternate"></link><published>2020-09-15T13:00:00+09:00</published><updated>2020-09-15T13:00:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:None,2020-09-15:/dan-dang-enziniagainakunatsuteshimatsuta.html</id><summary type="html">&lt;p&gt;システムを作ってもらったエンジニアがいなくなってしまって保守ができなくなった！？私が「システムを売らないシステム屋」を目指す理由。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;先日参加した経営者団体の集まりに参加した際、ある会社の社長とこんな話をしました。&lt;/h2&gt;
&lt;p&gt;Yさん:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;システム作ってもらったエンジニアが飛んでしまって、他の業者に頼んだら「他の人が作ったものはメンテナンスできません」っていうねん。そんなエンジニアおかしくない？でもあれは嘘やねん。そのあとメンテナンスしてくれる人見つけてん。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;おっしゃるお気持ちはとてもよくわかります。ただ、そのシステムの状態によるとは思います。ひどいシステムはメンテナンスが難しいのも事実です。過去にも2ヶ月かけても動かない機能を別のエンジニアがまるっと捨てて作り直したら2週間で正しく動いたことがありました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yさん:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;あなたの会社は人が作ったけど他の業者がやってくれないのをメンテナンスしてあげるのはどない？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なるほど。。(正直、人のスパゲッティコード見るのは嫌だ・・・作り直したくなる・・・と心の中で叫んでました)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yさん:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;次からはしっかり設計書を書いてくれる業者に頼むことにするわ。担当の人が飛んでも設計書があればメンテナンスできるでしょ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;そうですね。設計書がしっかり書かれていれば使えますね。残念ながら、実際には設計書もあてにはならず、設計書がプログラムと同期してしっかりメンテナンスされていることは実状としては少ないです。システムエンジニアは結局動いているプログラムのソースコードを解析することになります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;もう！じゃ、どうしたらいいの？&lt;/h1&gt;
&lt;p&gt;とYさんは思ったことでしょう。&lt;/p&gt;
&lt;p&gt;話している私としても問題だらけだなと感じました。（反省）&lt;/p&gt;
&lt;p&gt;この会話だけに多くの問題がありますが今回は以下の点について考えてみます。&lt;/p&gt;
&lt;h1&gt;問題1. 担当エンジニアがいなくなる&lt;/h1&gt;
&lt;p&gt;担当者は変わるものですよね。特に個人もしくは一人社長の場合、その代わりをできる人はいないのでなおさらです。
個人に発注すべきではないということではなく、そのメリット・デメリットを把握すべきです。&lt;/p&gt;
&lt;p&gt;いち個人にシステム開発を依頼する場合のメリット・デメリットを挙げてみます。&lt;/p&gt;
&lt;h3&gt;メリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;金額が平均して安価な傾向&lt;/li&gt;
&lt;li&gt;融通が利く&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デメリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;その人がいないとすべてが止まる(属人性の高さ)&lt;/li&gt;
&lt;li&gt;対応スピードに限界がある&lt;/li&gt;
&lt;li&gt;知識に偏りがある&lt;/li&gt;
&lt;li&gt;技術力の個人差がある(当然)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的な意見としては絶対に安く発注することが最優先でない限り個人に発注するべきではないと考えます。&lt;/p&gt;
&lt;p&gt;では企業に発注すれば安心していいのでしょうか。企業としても同じ人をいつまでもひとつの案件に配属させられるわけではありません。
むしろいろんなシステムを経験してもらうべく担当は変えるものです。
会社の体制としても特定の人に依存してしまう属人化が問題となっていたりします。
また担当者が変わってしまって以前のようにスムーズに進まないと感じた発注者も多くいることでしょう。
会社としては担当が変わっても対応できる体制を取るので個人よりは安心感はあると思います。&lt;/p&gt;
&lt;p&gt;しかし会社がいつまでも残っているとは限りません。&lt;/p&gt;
&lt;p&gt;発注側もそのことを考慮に入れて発注したり監査する必要があります。
特に発注側はシステムのことに詳しくないことが多いので意識して見ないと驚く結果になる場合もあります。&lt;/p&gt;
&lt;p&gt;知り合いのITエンジニアに第三者からの助言をもらうのもいいでしょう。&lt;/p&gt;
&lt;h1&gt;問題2. 設計書がメンテナンスされない&lt;/h1&gt;
&lt;p&gt;冒頭のYさんは製造業の方なので、そのイメージだと製造物は設計書通りにできているのが当然という認識があるのだと思います。正論をいうと確かにそうですね。&lt;/p&gt;
&lt;p&gt;改めて考察してみます。&lt;/p&gt;
&lt;h3&gt;なぜシステムは設計書がメンテナンスされないのか&lt;/h3&gt;
&lt;p&gt;システムエンジニアはズボラだからなのか？いや、それだと業界全体がズボラということになります。そんなズボラな業界のまま何十年と過ごすわけはないですね。&lt;/p&gt;
&lt;p&gt;私なりに原因を考えてみました。&lt;/p&gt;
&lt;h4&gt;考察1: 常に変化するから&lt;/h4&gt;
&lt;p&gt;設計はお客様の要望を資料にしたものです。下流に行くにつれてその要望をプログラムとして表現するための内容になります。&lt;/p&gt;
&lt;p&gt;設計書といっても要望がプログラムになるまでにいろんな粒度で表現されます。
「要件定義書」→「基本設計書」→「詳細設計書」を中心に他にもいろんな資料が存在します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;業務フロー図&lt;/li&gt;
&lt;li&gt;ER図&lt;/li&gt;
&lt;li&gt;テスト仕様書&lt;/li&gt;
&lt;li&gt;標準化資料&lt;/li&gt;
&lt;li&gt;テスト仕様書&lt;/li&gt;
&lt;li&gt;各種方針資料&lt;/li&gt;
&lt;li&gt;各種一覧表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;かなり膨大です。これらを正しく書くだけで1年はかかります。&lt;/p&gt;
&lt;p&gt;これらをもとにプログラムを作っていますが、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;なんと&lt;/strong&gt; 要望は日々変わるんです。理由は勘違い・伝え間違い・忘れていた・単純な間違いなど様々です。またもの凄いスピードが変化する社会にビジネスが変化するのも当然のことでしょう。&lt;/p&gt;
&lt;p&gt;さらに実際にプログラムを作ってみると思い通りに動かないことが毎日・毎時間のように発生します。どんな優秀なSEでもすべてのことを考慮して一つのミスもなく設計をすることはできません。実際に作ってみたことをもとに設計書を修正することになりますが、要因によっては上流の資料に遡ってすごい数の資料を修正することになります。&lt;/p&gt;
&lt;p&gt;労力をかければプログラムと設計書をほぼ同期させることはできるでしょう。プログラムの一部を修正するだけでもすごい労力ですが、それに紐づく資料をミス・漏れなくメンテナンスすることにどれだけの工数がかかるでしょう。それは開発費としてお客様に影響します。&lt;/p&gt;
&lt;p&gt;エンジニアとしてはこの影響が極力少なくなるように、無駄な設計書のメンテナンスに力を入れずに保守に必要な重要な資料を可能な限り自動化でメンテナンスするように努力必要ですね。&lt;/p&gt;
&lt;h4&gt;考察2: 一品ものだから&lt;/h4&gt;
&lt;p&gt;設計書を作って製造するものはなにが想像できるでしょう。まず私が思いついたのは自動車ですね。いろんな研究や試行錯誤を繰り返して設計して製造ラインなど工場で大量生産します。&lt;/p&gt;
&lt;p&gt;それに比べて業務システムやWebサイトなどは毎回が一品もののオーダーメイドです。だからどうせ工数かけまくってメンテナンスしてもという気持ちが働くからではないかなと思います。&lt;/p&gt;
&lt;p&gt;設計書をもとに何万個も作られるとしたら気軽には設計書を書かないはずです。オリジナルのシステムにとって設計書は不具合や変更がない限り一度プログラムを書くだけのために書かれる資料です。もちろん不具合や変更は必ずあるのでどこかしらの設計書は有効に使われるでしょう。でも膨大な資料がすべて使われることはないので保険にどこまでお金をかけるかという話になりそうです。しかも修正するのはプログラムなのでプログラムを解析すればわかる話です。&lt;/p&gt;
&lt;p&gt;じゃ、資料はどれも残す必要がないのかというと、そうではありません。プログラムを解析するにも時間がかかるのでその道しるべになる資料は時間がかかってもメンテナンスしておくべきですね。&lt;/p&gt;
&lt;p&gt;たとえば以下のようなものが効果的でしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;業務フロー図&lt;/li&gt;
&lt;li&gt;ER図&lt;/li&gt;
&lt;li&gt;CRUD図&lt;/li&gt;
&lt;li&gt;機能一覧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にもあると思いますが、これらは担当者が変わったときにプログラムを解析するための道しるべになるでしょう。&lt;/p&gt;
&lt;p&gt;これは想像ですが、携帯電話やゲームやカーナビシステムやパッケージソフトなど大量生産するプログラムはもっと設計書もしっかり残しているのではないでしょうか。それだけ開発費用も高額ですが。&lt;/p&gt;
&lt;h4&gt;考察3: プログラムそのものが設計だから&lt;/h4&gt;
&lt;p&gt;これは若干屁理屈のようにも聞こえるかもしれませんが、プログラムというのは実際にはコンピュータ上に動く機能を実行させるための設計書であるとも言えます。&lt;/p&gt;
&lt;p&gt;プログラムという設計書を正しく書いておくことで正しく機能するというこですね。&lt;/p&gt;
&lt;p&gt;では利用者が求める機能を聞いただけでプログラムを書くことができて、プログラムを見るだけで機能が把握できるなら設計書は不要ですね。&lt;/p&gt;
&lt;p&gt;私も設計書がほとんど要らないシステム開発を目指して改善を重ねている最中です。&lt;/p&gt;
&lt;h1&gt;結局どうしたらいいの？&lt;/h1&gt;
&lt;p&gt;発注するときは以下のような考慮をしてくれる業者に依頼してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短期間に区切って早期に動くものを見せてくれる&lt;/li&gt;
&lt;li&gt;効率化をはかり自動化に取り組んでいること&lt;/li&gt;
&lt;li&gt;新しい技術を積極的に使って利用技術の老朽化を避けている&lt;/li&gt;
&lt;li&gt;長期の保守を想定している&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;この件はいずれまた言及したいと思います。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;私が目指すもの&lt;/h1&gt;
&lt;h2&gt;「システムを売らないシステム屋」&lt;/h2&gt;
&lt;p&gt;担当者は変わるものです。&lt;/p&gt;
&lt;p&gt;では本当にお客様にとっていい方法とはなにかと考えました。
現時点の私の結論は&lt;code&gt;システムを売らないシステム屋&lt;/code&gt;です。システムを作って納品するのではなく、システムを作れる人を各企業内に育てるのです。
未経験者や経験が不足している人が社内のシステムを作るには数々の難関があるでしょう。私たちはそれをサポートするんです。
業務のことを最もわかっているお客様の社員がシステムを作れるようになれば、お客様が開発に関わってくれないという問題も解決する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1企業1システムエンジニア作戦&lt;/code&gt;です。いまや、ITを利用しないビジネスはないとも言われます。農業もAIを導入している時代です。本当は各企業にシステムに詳しい人が一人ぐらいはほしいはず。&lt;/p&gt;
&lt;p&gt;私の目指すシステム開発とエンジニア教育が一気にできるチャンス！&lt;/p&gt;
&lt;p&gt;Yさんには本当に感謝です。&lt;/p&gt;</content><category term="システム開発"></category><category term="システム開発"></category><category term="システム保守"></category></entry><entry><title>サイトへのアクセス数見てますか？</title><link href="/saitohenoakusesushu-jian-temasuka.html" rel="alternate"></link><published>2020-09-14T16:13:00+09:00</published><updated>2020-09-14T16:13:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:None,2020-09-14:/saitohenoakusesushu-jian-temasuka.html</id><summary type="html">&lt;p&gt;ウェブサイトやブログは作ったけど、どのぐらい見てくれているのかはよくわからない。アクセス数、気にしなくて大丈夫ですか？&lt;/p&gt;</summary><content type="html">&lt;h1&gt;あなたのサイトには毎月どのぐらいアクセスされているか知っていますか？&lt;/h1&gt;
&lt;p&gt;マーケティングの観点からもアクセスの分析は有効です。&lt;/p&gt;
&lt;p&gt;例えばあなたのサイトに無料体験申込のページがあるとしましょう。
サイトへのアクセス数とサイト内の無料体験申込の比率を知ることで、単純に言えばアクセス数を2倍にすることで申込が2倍になる可能性があります。
またアクセス数は多いけど無料体験申込が極端に少ない場合、無料体験申込への誘導が悪かったり無料体験自体に魅力がないなどどこを改善すべきか絞り込むことができるわけです。&lt;/p&gt;
&lt;p&gt;様々な要因があって机上の計算通りにはいきませんが、問題や改善するための材料になることは間違いありません。
まずは各タイミングの数を知ることからはじめて、お客様の気持ちを知りましょう。&lt;/p&gt;
&lt;h1&gt;Google Analytics&lt;/h1&gt;
&lt;p&gt;手軽にサイトへのアクセスを確認できるものとしてGoogle Analyticsがあります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="google analytics" src="/images/logo_lockup_analytics_icon_vertical_black_2x.png"&gt;&lt;/p&gt;
&lt;p&gt;https://analytics.google.com/&lt;/p&gt;
&lt;p&gt;例として、私のqiitaの投稿に対するアクセス数のグラフを掲載します。
これは2年間のアクセス数の推移ですが、徐々に上がって最近は停滞していることがわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-myqiita-1.png" alt="qiitaのアクセス" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;またこちらを見ると平日の業務時間あたりにアクセスが集中していることがわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-myqiita-2.png" alt="qiitaのアクセス" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;さらにどのページが人気なのかもわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-myqiita-3.png" alt="qiitaのアクセス" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;他にも検索エンジンから来たのか直接ブックマークなどから来たのか、どの国からのアクセスが多いのか、など色んなことがわかります。&lt;/p&gt;
&lt;h1&gt;Google Analytics 導入手順&lt;/h1&gt;
&lt;p&gt;導入手順を軽く確認しておきます。&lt;/p&gt;
&lt;h3&gt;ログイン&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Google Analyticsを利用するためにはGoogleのメールアドレスが必要です。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下のページアクセスして、Googleのメールアドレスでログインしてください。&lt;/p&gt;
&lt;p&gt;https://analytics.google.com/&lt;/p&gt;
&lt;h3&gt;用語説明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用語&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;アカウント&lt;/td&gt;
&lt;td&gt;Googleアカウント(メールアドレス)とは別のもので管理するサイト単位の名前のこと&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;トラッキングID&lt;/td&gt;
&lt;td&gt;サイトのアクセスを追跡するために割り振られるID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;アカウントの追加&lt;/h3&gt;
&lt;p&gt;左下の「管理」のボタンを押して、「アカウント作成」を選ぶ。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-01.png" alt="手順1" class="img-fluid"&gt;
&lt;img src="/images/google_anlytics-00.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;アカウント名を入力して「次へ」を押す。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-02.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;通常のWebサイトなら「ウェブ」を選択して「次へ」を押す。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-03.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;サイト名やURLを入力し「作成」を押す。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-04.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;利用規約を確認する。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-05.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;トラッキング情報を確認してサイトに貼り付ける。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/google_anlytics-06.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;</content><category term="ウェブサイト"></category><category term="ウェブサイト"></category><category term="ブログ"></category></entry><entry><title>ブログ始めます</title><link href="/burogushi-memasu.html" rel="alternate"></link><published>2020-09-14T16:00:00+09:00</published><updated>2020-09-14T16:00:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:None,2020-09-14:/burogushi-memasu.html</id><summary type="html">&lt;p&gt;自己紹介とブログをはじめた理由、エンジニアらしい？ブログ管理についてもふれています。&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="/images/gori0I9A3105072103338_TP_V.jpg" class="img-fluid" width="100%"&gt;&lt;/p&gt;
&lt;h1&gt;自己紹介&lt;/h1&gt;
&lt;p&gt;はじめまして。朴 玄旭(박 현욱 ぱく ひょぬ) です。&lt;/p&gt;
&lt;p&gt;10歳に日本に来た韓国人です。&lt;code&gt;Planaria Inc.&lt;/code&gt;というIT会社を経営しています。
現役でシステムエンジニアもやっていてエンジニア歴は17年ほどです。&lt;/p&gt;
&lt;p&gt;連絡はブログ内のアイコンのfacebookかtwitterからどうぞ。&lt;/p&gt;
&lt;h1&gt;なぜブログはじめたのか&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://qiita.com/HyunwookPark"&gt;qiita&lt;/a&gt;にはちょくちょく投稿していますが、
技術ネタ以外はちょっと書きづらいのでこちらで発信してみることにしました。&lt;/p&gt;
&lt;p&gt;IT企業以外の人向けにシステムやITのことを知ってもらって、
ビジネスの効率化やシステム導入するときに参考になる情報を発信していきます。&lt;/p&gt;
&lt;p&gt;プログラミングに興味がある人やエンジニアを目指す人のための情報も発信する予定です。&lt;/p&gt;
&lt;p&gt;エンジニア・経営者として普段思ったことや考え、また日々の仕事のことも公開範囲で残していこうと思います。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;このブログでの内容は個人的な見解で所属する会社や団体とは関係ありません。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;どんなことを書くのか&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;IT技術&lt;/li&gt;
&lt;li&gt;ビジネス関連&lt;/li&gt;
&lt;li&gt;システム開発&lt;/li&gt;
&lt;li&gt;教育&lt;/li&gt;
&lt;li&gt;心&lt;/li&gt;
&lt;li&gt;お金のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ブログの管理&lt;/h1&gt;
&lt;p&gt;Python製の&lt;a href="https://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;というツールでMARKDOWNをHTMLに変換してGitHubにアップすることにしました。
普段からメモはMARKDOWNで残しているのでMARKDOWNを使いたかったです。
「なんということでしょう！普段のメモがそのままブログに！」という感じです。
MARKDOWNだけで管理しているので、まとめて一括に編集することも可能だしサーバ引っ越しも簡単です。
WordPressなどのCMSで管理するのもいいですが、ちょっとエンジニアぽくてかっこいいじゃないですか。&lt;/p&gt;</content><category term="ブログ"></category><category term="ブログ"></category></entry></feed>