<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pakhuncho Blog</title><link href="https://hyunwookpark.github.io/" rel="alternate"></link><link href="https://hyunwookpark.github.io/feeds/all.atom.xml" rel="self"></link><id>https://hyunwookpark.github.io/</id><updated>2020-09-26T17:30:00+09:00</updated><subtitle>システムを売らないシステム屋</subtitle><entry><title>ITエンジニア「雨ニモマケズ」</title><link href="https://hyunwookpark.github.io/itenziniayu-nimomakezu.html" rel="alternate"></link><published>2020-09-26T17:30:00+09:00</published><updated>2020-09-26T17:30:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:hyunwookpark.github.io,2020-09-26:/itenziniayu-nimomakezu.html</id><summary type="html">&lt;p&gt;わたしのITエンジニアとしての想いを書いてみました。（長文です、マジで長文）&lt;/p&gt;</summary><content type="html">&lt;p&gt;「雨ニモマケズ」、宮沢賢治の超有名な作品ですね。
学校の授業に登場して以来、なぜか気に入っててフルで暗記していました。今は後半うる覚えです。&lt;/p&gt;
&lt;p&gt;この作品になぞってシステムエンジニアとしての想いを書いてみました。
以前他でも公開はしたのですが、今回は想いも記載してみます。&lt;/p&gt;
&lt;p&gt;言葉はネタですが想いは真剣です（キリッ）&lt;/p&gt;
&lt;p&gt;そのせいでこの記事結構長くなってしまいました。。。&lt;/p&gt;
&lt;h1&gt;まずは以下のスライドを軽く流し見どうぞ。&lt;/h1&gt;
&lt;p&gt;PCならスライドをクリックしてからキーボードの「←」「→」でページ移動できます。&lt;/p&gt;
&lt;iframe src="https://hyunwookpark.github.io/sample/ame/amenimo.html" width="600" height="400"&gt;&lt;/iframe&gt;

&lt;h1&gt;想い&lt;/h1&gt;
&lt;h2&gt;雨ニモマケズ 風ニモマケズ 雪ニモ夏ノ暑サニモマケヌ 丈夫ナPCヲ持チ&lt;/h2&gt;
&lt;p&gt;雨でも風でも雪でも暑くても頑張って仕事に取り組むエンジニアの姿勢？
かと思いきや、PCのことだった。（すみませんネタです）&lt;/p&gt;
&lt;p&gt;でもPCって壊れやすいですよね。
PCに残してるから安心なんて思ってたら明日急に壊れてデータ復旧不可能なんてこともありますからね。&lt;/p&gt;
&lt;p&gt;プロとしては大事なデータはしっかりバックアップ取りましょう。&lt;/p&gt;
&lt;h2&gt;ウソノ報告ヲセズ&lt;/h2&gt;
&lt;p&gt;システムエンジニアとして16年、様々なプロジェクトに参画してきました。
そこでは保身のために上司やお客様に嘘をつくリーダーたちを目にしてきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不備があっても報告しない&lt;/li&gt;
&lt;li&gt;無駄だけど作るのやめようと提案しない&lt;/li&gt;
&lt;li&gt;スケジュール遅延も報告しない&lt;/li&gt;
&lt;li&gt;できないことをできないと言わない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怒られるのがこわい、何とか隠してごまかして穏便に済ませたい。気持ちはとてもよくわかります。私ももしかしたらその立場だと同じことをしていたかもしれません。&lt;/p&gt;
&lt;p&gt;立場の違いからか、私はかなりの違和感を感じ続けました。もちろんリーダーたちには誠実にやろうとか情報をオープンにしようと強く提案したときもありましたが、口止めをされました。私が雇われていたのはSierなどの元請け会社ですからその会社に不利益を与えるわけにはいきません・・・と思っていました。でもお客様に雇われていた立場でもあるはずです。信念を貫けなかった私の責任も多いでしょう。&lt;/p&gt;
&lt;p&gt;ウソはしわ寄せがきます。なんとか無理してそのウソをバレないようにする必要があります。それをなんとか対処しようと末端のエンジニアに無理がきます。それは品質の低下やコスト増加につながります。表向きは解決したように見えるときもありますが、結局は達成できず後戻りできないときにお客様に伝えることで信頼を失うときもあります。&lt;/p&gt;
&lt;p&gt;ウソは時間が経つほどに負債になり取り戻しが難しくなります。
心にもしこりがあって高質な仕事の妨げになります。職人としての誇りも失います。&lt;/p&gt;
&lt;h2&gt;無駄ナモノヲ提案シナイ&lt;/h2&gt;
&lt;p&gt;システムエンジニアはものづくりが仕事です。つくればつくるほどお金になります。また、ものづくりが大好きな性格なのでつくるのがそもそも楽しいという面もあります。&lt;/p&gt;
&lt;p&gt;ただ、提案や依頼の「もの」はつくるに値するものでしょうか。長い間エンジニアをやってきて一度や二度しか使われず結局削除してしまった機能もあります。必要性の考慮が足りなかったときもあるでしょうが、気づいていた時の方が多いのではないでしょうか。いや、必要性をそもそも考えてなかったかもしれません。スケジュールに追われ開発を続けていると意識が薄れるものです。それは結果として作った本人としても悲しみ残します。本心はみんな「使う人には喜んでほしい」んです。価値を提供したいんです。&lt;/p&gt;
&lt;p&gt;そんなものを作ってしまったと悔いる必要はないと思っています。それは私の経験となり技術となり他の点で社会に貢献できる、そう思います。&lt;/p&gt;
&lt;p&gt;自分が提供するものが相手にとってどんなメリットがあるのか常に意識したいものです。&lt;/p&gt;
&lt;h2&gt;自由ナ服ヲ着テ&lt;/h2&gt;
&lt;p&gt;いまは随分自由な服装の仕事場も増えてきましたが、まだまだスーツでという現場は少なくありません。ビジネスカジュアルというルールの場所もありますが、個人的には余計混乱してしまってます。チノパン？スラックス？なにそれ？ &amp;gt;_&amp;lt;&lt;/p&gt;
&lt;p&gt;ルールは大切です。社会人としてルールは可能な限り守ります。
でも実状に合わないルールは改善していきたいですね。&lt;/p&gt;
&lt;p&gt;スーツが大好きな人ならいいでしょう。でも私は堅苦しくて肩が凝ります。
たまに休日出勤するときはなぜか私服OKだったりするんですが、心の中「ヤッホー！」ってなってます。そのとき、"休日出勤"やでっていうところは忘れてます。（笑）
私服で作業してるとホンマに楽なんですよー。&lt;/p&gt;
&lt;p&gt;そんなスーツ文化の職場で女性は私服でOKなんです。露出が多かったりしない程度でというルールの会社が多いですね。女性は自分で判断ができるからですかね？まあわからなくもないけど。。&lt;/p&gt;
&lt;p&gt;どうしてスーツってルールになったんでしょうね。&lt;/p&gt;
&lt;h4&gt;お客様に合うかもしれないから礼儀のため？&lt;/h4&gt;
&lt;p&gt;営業の人なら誠実に見えるというメリットもあるでしょう。技術職はほとんど開発チームのメンバーと過ごすのでその効果は薄そうです。礼儀のためなら和服でもいいし私の国なら韓服（한복、ハンボッ）でもいいってことですよね？&lt;/p&gt;
&lt;p&gt;私は自国の伝統服が好きなので韓服でずっと過ごしたいなと思っています。日本では手に入りづらいのですが。。色んな国の人がそれぞれの国の服を着て仕事ができる職場にしたいと思います。&lt;/p&gt;
&lt;h4&gt;不快な服を着てくる人の抑制？&lt;/h4&gt;
&lt;p&gt;不快な服とはどんなものなんでしょうね。洗濯してないとかは除外として、不快だと思う基準は人それぞれでそれをすべて禁止するのはいささかどうなんでしょう。40年以上生きてきて身の回りに不快な服装をしている人はいませんでした。いや、私が不快だと感じたことがないんですね。。この感覚は少数派なんでしょうか。
男性でシャツがズボンから出てる人とかはいますが、スーツを着ててもシャツが出る人は出るんです。（笑）女性は露出が多いと男性が気が散るということなんでしょうか、それとも媚びを売ってるように見えて別の女性が不快になるのでしょうか。いずれにしても捉え方の問題のようにも思えます。私が能天気過ぎ？&lt;/p&gt;
&lt;h4&gt;よく見かけるルール&lt;/h4&gt;
&lt;p&gt;男性が職場で禁止される服には↓こんなものがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;デニムパンツ&lt;/li&gt;
&lt;li&gt;半ズボン&lt;/li&gt;
&lt;li&gt;アロハシャツ&lt;/li&gt;
&lt;li&gt;タンクトップ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;女性が職場で禁止される服には↓こんなものがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;派手な過ぎる服&lt;/li&gt;
&lt;li&gt;露出が多い服&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;女性は少し漠然としてますが男性は細かく言わないとわからんってことなんじょうかね。&lt;/p&gt;
&lt;h4&gt;テレワークで自由に&lt;/h4&gt;
&lt;p&gt;テレワーク・リモートワークの普及で自由な服装で仕事できるようになってきたのは本当に嬉しいですね。&lt;/p&gt;
&lt;h2&gt;好キナダケもにたーヲ増ヤシ&lt;/h2&gt;
&lt;p&gt;SESという他の会社に出向いて仕事する形態が多かったので、PCやモニターは支給されるものを使っていました。&lt;/p&gt;
&lt;p&gt;複数の情報を交互に見ながら作業することが多いのでモニターは最低でも2つ、できれば3つは欲しいですね。&lt;/p&gt;
&lt;p&gt;一度モニター2つ以上を体験するとモニター1つの生活には戻れません！ぱっと見はまるでトレーダー！？（笑）&lt;/p&gt;
&lt;h2&gt;好キナOSデ&lt;/h2&gt;
&lt;p&gt;他の会社に出向いて仕事するとき支給されるPCは、当然OSを選べません。選択できるプロジェクトもあるらしいですが、16年間のエンジニア生活ではお目にかかったことはありません。&lt;/p&gt;
&lt;p&gt;MACが使いやすい人、Windowsが使いやすい人、Linuxが使いやすい人、人それぞれ使いやすい道具があると思うんです。「弘法筆を選ばず」という言葉がありますね。確かに他のOSでも仕事はできますが、「職人の腕はその道具でわかる」という言葉もあるようにこだわりのある仕事をするには自分に合ったものを使うのが大切です。&lt;/p&gt;
&lt;h2&gt;好キナ席デ&lt;/h2&gt;
&lt;p&gt;モダンな職場ならノートパソコンだけを持ち毎日異なる席で仕事をすることもあるでしょう。しかしほとんどの職場はそうではないですよね。&lt;/p&gt;
&lt;p&gt;必要な時に必要なメンバーで集まって仕事をしたり時には一人で黙々と作業をしたり気分によって窓際の陽当りいいところで仕事したり、能率や気分によって柔軟な環境づくりがいい仕事につながると思います。&lt;/p&gt;
&lt;p&gt;まずはデスクの引き出しにある紙の資料を処分できるようにペーパーレスを目指すのもいいでしょう。机の中や上にあるおやつをみんなが食べられる共有スペースに置くのもいいでしょう。&lt;/p&gt;
&lt;p&gt;私の究極の目標は美しい自然遺産が見える場所にキャンプ椅子とキャンプテーブルを置いて仕事することです。たっぷり虫よけスプレーはするけど（笑）そして、すぐ見える距離で家族が楽しく遊んでいる声が聞こえる・・そんな席で仕事がしたいです。&lt;/p&gt;
&lt;h2&gt;残業モセズ&lt;/h2&gt;
&lt;p&gt;基本的には残業は悪だと思って仕事に取り組みましょう。
仕事を頑張る人が認められるのは当然ですが、長い時間やってる方が素晴らしいとは限りません。トラブルなどでどうしても遅くなることはあるでしょう。しかし、残業前提のスケジュールを組むことは明らかに間違っています。効率をあげることより残業時間まで残っていれば責任は果たせることになりますからね。一日の労働時間を減らすことで集中力を高めて能率をあげるという取り組みもありますね。ただし、これは時間短縮だけではなく意欲をどうやって高めるかがポイントでしょう。&lt;/p&gt;
&lt;p&gt;ITの仕事はまだまだ時間単価の報酬がほとんどです。仕事を早くこなせば「すごいねー」と言ってもらえて次の仕事が割り当てられます。しかも人より早く上質な仕事ぶりでもすぐに報酬に結び付くわけではありません。能力が高いのにこれに嫌気がさしてしまうエンジニアも多くいます。早くできる仕事をゆっくりこなせば高額な報酬がもらえるこの仕組みには矛盾があります。効率よくレベルの高い仕事を目指すにはこの仕組みの転換が必要ですが、定量的に上質な仕事を判断するのはどうしたらいいのかが常々悩んでいる課題でもあります。&lt;/p&gt;
&lt;h2&gt;通勤モセズ&lt;/h2&gt;
&lt;p&gt;都市の通勤は本当に苦痛でした。混み混みの電車に揺られて約1時間をかけて移動してクタクタになった状態から仕事開始ですね。片道3時間近くの現場もありました。毎日6時間を通勤に費やすのはあまりにもったいないですね。&lt;/p&gt;
&lt;p&gt;通勤もメリットはあります。運動不足を解消し読書の時間を生みます。しかし通勤をしないことで得られるメリットはもっと多いと考えます。&lt;/p&gt;
&lt;p&gt;はからずも広まったテレワークの効果は私が語るまでもないでしょう。地域や国を超えて仕事ができ、通勤に費やしていた一日2時間の貴重な時間は私生活を豊かにしたり自分の成長のために使えます。&lt;/p&gt;
&lt;p&gt;世界のリゾートからテレワークで仕事する職場づくりを目指します。&lt;/p&gt;
&lt;h2&gt;週ニ3日ハ休ミ&lt;/h2&gt;
&lt;p&gt;山奥ニートという取り組みをしている人たちをご存知でしょうか。
彼らの1ヶ月の生活費は1万5千円程度だといいます。都市部であくせく働きお金を稼ぐこと以外にも選択肢はあるということを気づかせてくれる話でした。&lt;/p&gt;
&lt;p&gt;私は週に3日は休みにしたいと思っています。
休みの日には家族と過ごし自分を高める学びをして心休まる仲間と語り合う、そんな日を過ごしたいです。&lt;/p&gt;
&lt;p&gt;システムエンジニアは現時点、仕事形態と能力次第で高額を稼ぐことができます。でもそれは本人のスタイルに合わせてもいいのではないでしょうか。自分の目標・目的のために一気に稼ぎまくるのもいいし、ゆったりしながら私生活・投資・ボランティアなどに時間を使うのもいいでしょう。また主婦の方や介護が必要な両親を持つ方・体力的に長時間労働が難しい方が隙間の時間を使って仕事をしたいという話も私の周りでよく聞きます。&lt;/p&gt;
&lt;p&gt;多様な価値観の人がその価値観に合わせて仕事ができる環境を目指しています。&lt;/p&gt;
&lt;h2&gt;東ニExcelガふりーずシタ人イレバMicrosoftダカラダヨト言イ&lt;/h2&gt;
&lt;p&gt;Microsft Excelは「よく止まる」「すぐ壊れる」。ITエンジニアの多くがよく言うネタです。（笑）&lt;/p&gt;
&lt;p&gt;システムエンジニアとしてExcelは設計などでかなり頻繁に使うソフトウェアですが、よくファイルが壊れるしよくフリーズ（止まって操作できない状況）します。ファイルを共有モードにして複数人で同時に使う場合はなおさらです。あれだけ高機能なものなので理解はできますが。&lt;/p&gt;
&lt;p&gt;Excelはよく壊れるものとして高頻度のファイル保存やバックアップが必要です。メイン業務で使う場合は注意しましょう。スケジュールをExcelで管理しようとしてデータが多くなりすぎて開くだけで数分かかるExcelもよく見かけました。&lt;/p&gt;
&lt;p&gt;システムエンジニアとしては目的に合った適切なツールを提案するべきですね。&lt;/p&gt;
&lt;h2&gt;西ニ休出ノ人イレバすこーぷ見直セト言イ&lt;/h2&gt;
&lt;p&gt;休日出勤が何ヶ月も続くなんてことはよくありました。火消し要員として、炎上プロジェクトに配属することが多く毎日終電帰り + 休日出勤という日々が経歴10年目あたりまではずっと続きました。&lt;/p&gt;
&lt;p&gt;諦めもありました。まさか日が昇っているうちに家に帰れる日々が来るなんて思いもしませんでした。&lt;/p&gt;
&lt;p&gt;最近は残業が多いプロジェクトはずいぶん減ったように感じます。働き方改革の影響もあり企業での残業に対する規制が増えました。また仕事が慣れてきてリーダーと適切なスケジュールを調整できる力がついたことも残業がなくなったように感じ要因かもしれません。&lt;/p&gt;
&lt;p&gt;休日出勤は残業でも達成できない場合です。明らかに無理があります。そこで無理をしてもエンジニアのミスが増えシステムに不具合が残り、リリース後にさらなる工数で修正することになります。お客様も開発者も誰も幸せになれません。&lt;/p&gt;
&lt;p&gt;傷が浅いうちにスコープ（作成範囲やリリース範囲）を見直して現実的な提案をしましょう。&lt;/p&gt;
&lt;h2&gt;寛大ナ心デ人ヲ育テ&lt;/h2&gt;
&lt;p&gt;教育に力を入れている組織こそ成長する組織です。&lt;/p&gt;
&lt;p&gt;「教育とは待ってあげること」だそうです。&lt;/p&gt;
&lt;p&gt;各自が自分で学び成長することを答えたい気持ちや叱りたい気持ちを堪えてじっと待ち、見守ることが大切だそうです。&lt;/p&gt;
&lt;p&gt;私の最初の上司は厳しい人でした。毎回私の成果物にダメ出しをしました。しかもどこがどうよくないのか教えてくれませんでした。「お前は叩けば伸びるタイプだ」といつも言っていました。その人なりの教育方針だったのでしょう。内心「いやいや、私は褒められて伸びるタイプです」と思っていました。おかげさまで自分で考える力はつきました。ただし、自信は日に日になくなっていきました。あの時は本当に心が弱かったです。&lt;/p&gt;
&lt;p&gt;最初の会社をやめてフリーランスになりました。プロジェクトの人たちは全員他の会社の人です。すると、私を後輩や部下ではなく一人のエンジニアとして見てくれました。&lt;/p&gt;
&lt;p&gt;300人を超える特大プロジェクトに参画したとき標準化チームに所属していた私は、3年目の若手でしたが技術を調査し開発指針や設計ルールなどを検討するという重役を頂きました。そこには尊敬に値する素晴らしいエンジニアも何人もいましたが、その一人が言ってくれた言葉は今も忘れません。私が開発方式の2択で悩んでいるとき超ベテランのエンジニアは「どちらを選んでもいい。私はあなたの決定に従います。」と言ってくれたのです。嬉しい気持ちと責任感が高まる感じを覚えています。一所懸命に取り組む私の成果を&lt;code&gt;信じて待って&lt;/code&gt;くれたんです。&lt;/p&gt;
&lt;p&gt;各エンジニアが開発するための仕組みやルールを整備していたので、そこで決めたことや開発技術などを300人相手に発信したりもしていました。ある日ウィルス駆除ソフトの使い方についてセキュリティ問題になるような発言を300人に発信してしまいました。作業効率を求めるあまりの大きなミスでした。幸いなことに、プロジェクトの上層部の人にすぐに呼び出されて訂正の案内を流したので問題にはなりませんでした。そのときも多くの人の前では厳しく注意されて、あとから「公の場では同じようなことがないように他のメンバーにも聞こえるようにあえて厳しくしました。効率UPの気持ちはわかりますが注意しましょう。」というフォローをもらいました。&lt;/p&gt;
&lt;p&gt;そこまで深く周りや相手を考えて指導できる人になりたいものですが、あの時指導してくれた人の年齢に近づいてきた私はまだまだそのレベルには達していません。&lt;/p&gt;
&lt;h2&gt;新シイコトニ貪欲ニ取リ組ミ&lt;/h2&gt;
&lt;p&gt;ITエンジニアは常に新しいことに興味をもって取り組むべきです。&lt;/p&gt;
&lt;p&gt;古く安定した技術も利点はありますが、ITの分野で新しい技術というのは多くの人が問題に直面してそれを改善するために作り出したものです。その中でも世界的なシェアを持つものは多くの人がその効果を認めたものです。&lt;/p&gt;
&lt;p&gt;自分が慣れたものだけに固執せず、柔軟に新しい技術を取り入れて安全性と効率を検討してみましょう。
新しいものが好きな人は、それが本当にお客様のために必要なものかを考慮して検討しましょう。&lt;/p&gt;
&lt;h2&gt;決シテですまーちニシナイ&lt;/h2&gt;
&lt;p&gt;「デスマーチ」とは、"死の行進"という意味で、IT業界では極端に過酷な労働状態がずっと続いている現場やその状況のことを指します。消化しきれないタスクや不具合が発生する毎日が続きまるで終わりの見えないプロジェクトのことを、死の世界へに向う行進に例えていう言葉です。&lt;/p&gt;
&lt;p&gt;幾度もデスマーチは経験しましたが、そこで学んだことを活かして決してデスマーチになることがなくお客様・エンジニアの両者が幸せになるプロジェクトを心がけます！&lt;/p&gt;
&lt;h2&gt;サウイフモノニ ワタシハナリタイ&lt;/h2&gt;
&lt;p&gt;そういうエンジニアに私はなりたいです。&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;おまけ&lt;/h1&gt;
&lt;p&gt;本来の雨ニモマケズの原文は&lt;a href="https://ja.wikisource.org/wiki/%E9%9B%A8%E3%83%8B%E3%83%A2%E3%83%9E%E3%82%B1%E3%82%BA"&gt;こちら&lt;/a&gt;でご確認ください。&lt;/p&gt;</content><category term="システム開発"></category><category term="ITエンジニア"></category><category term="システム開発"></category></entry><entry><title>飲み会を投資に変える方法</title><link href="https://hyunwookpark.github.io/yin-mihui-wotou-zi-nibian-erufang-fa.html" rel="alternate"></link><published>2020-09-24T02:31:00+09:00</published><updated>2020-09-24T02:31:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:hyunwookpark.github.io,2020-09-24:/yin-mihui-wotou-zi-nibian-erufang-fa.html</id><summary type="html">&lt;p&gt;私がこれまで浪費した飲み会の総額はいくらでしょう？（笑）&lt;/p&gt;</summary><content type="html">&lt;h1&gt;あなたは付き合いのいい人ですか？付き合いの悪い人ですか？&lt;/h1&gt;
&lt;p&gt;人のことを思い行動するあなたはよく飲み会に誘われますよね。でもそれは本当に参加すべき場所でしょうか。&lt;/p&gt;
&lt;p&gt;私は16年以上システムエンジニアとしていろんな人に会うことで学びを得ていました。人と話しやすくなることで仕事もはかどりましたし重要な仕事を任せてもらえました。そのおかげで技術力の向上につながりました。&lt;/p&gt;
&lt;p&gt;私は人付き合いもいい方で特別な用事がない限りは誘われた飲み会には参加していました。それは私の仕事の時のコミュニケーションを円滑にするいい機会でした。単に楽しかったことも否めません。いや、めっちゃ楽しんでました。&lt;/p&gt;
&lt;p&gt;話題の半分は世間話です。趣味の話や身近な話も相手を知るためには大切ですよね。残りの半分は「仕事に関する問題点（愚痴）」「メンバーに関する問題点（愚痴）」などでした。盛り上がっているのは人のことをからかったりする声の大きい人の話でした。少し特徴のある人の口癖や身振りのマネは笑いのネタでした。人をバカにして笑うのは好きではないのでそういう人が参加する飲み会は避けている程度でした。&lt;/p&gt;
&lt;h1&gt;16年間飲み会に投資した？時間と費用&lt;/h1&gt;
&lt;p&gt;さて、そんな飲み会に費やしてきた時間やお金をちょいっと計算してみましょう。
1ヶ月に2回ぐらいはまあ普通ですよね。1回あたり5,000円～10,000円の飲み会が平均3時間だとして16年分を計算してみました。金額は平均して7,500円とします。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3時間 × 月2回 × 12ヶ月 × 16年 = 1152時間 = 48日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは思ったほど多くなかったです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7,500円 × 月2回 × 12ヶ月 × 16年 = 2,880,000円&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは予想以上に多かったです。。&lt;/p&gt;
&lt;p&gt;この投資に見合う結果はあったのでしょうか。飲み会がなくても普段の仕事のときのコミュニケーションを少し工夫することでできたかもしれません。世間話も大切なので半分は有効だったと考えても無駄も多かった気がします。&lt;/p&gt;
&lt;h1&gt;心がマイナスになるところには行かなくていい&lt;/h1&gt;
&lt;p&gt;最近「自分の心がマイナスになる集まりには参加しなくていい」ということを知りました。人の愚痴を聞いても学びを得られるところまでまだ成長していないので、マイナスなことばかり話している飲み会が苦痛になってきました。前向きなことを考えて新しいことにチャレンジしまくりたいです。&lt;/p&gt;
&lt;p&gt;この2年ほどは前向きで人を応援して可能性を語る人のところにばかり身をおきました。
新しいチャレンジや新しい出会いのおかげでこの2年はとんでもなく長く濃い時間でした。&lt;/p&gt;
&lt;p&gt;人生早いなと感じるのはどうしてでしょう。そう、同じ日の繰り返しだからです。&lt;/p&gt;
&lt;p&gt;自分がなりたい人がいる場所、自分をもっと高めようと努力している人がいる場所、そういう場所に身をおくだけで意識が変わることを経験しました。&lt;/p&gt;
&lt;p&gt;いま周りにいる人は、自分が目指す人もしくは自分と同じ人なんですね。類は友を呼ぶですよね。&lt;/p&gt;
&lt;h1&gt;行ってはいけない場所&lt;/h1&gt;
&lt;p&gt;以下のような人がいる場所は行くべきではありません。&lt;/p&gt;
&lt;h3&gt;1. 愚痴やマイナスなことをいう人&lt;/h3&gt;
&lt;p&gt;愚痴やマイナス発言はストレスを生むだけでなく、周辺の人の気持ちをマイナス方向に変える力を持ちます。これは本当に危険です。人とは影響されやすい生き物なんです。なにかを目指したい成し遂げたい人がそんな影響をもらう場所にいてはいけません。&lt;/p&gt;
&lt;p&gt;同じことをやるのでも前向きなら得られる学びが後ろ向きなら邪念しか生みません。&lt;/p&gt;
&lt;h3&gt;2. 足を引っ張る人&lt;/h3&gt;
&lt;p&gt;自分が学んでいることなどを話すと、「そんなの、なんの意味があるの？」「なにがしたいの？」「人間愛？世界平和？ぷぷ」と言う人がいます。こんな人は自分と同じ場所に他の人を残したいだけです。&lt;/p&gt;
&lt;h3&gt;3. 無理・できないと言う人&lt;/h3&gt;
&lt;p&gt;目指すことやアイデアを話すと、「でも・・・」とか「・・・だから無理」とかできない理由を並べる人。その人は物知りだからではありません。やったことがないだけなんです。&lt;/p&gt;
&lt;p&gt;やる気を出すにはもの凄いエネルギーが必要です。「でも」「無理」を話す人はやっと出したやる気を簡単に奪います。&lt;/p&gt;
&lt;h1&gt;行くべき場所&lt;/h1&gt;
&lt;h3&gt;1. 前向きな人&lt;/h3&gt;
&lt;p&gt;なんでも前向きに捉えて話す人には本人も相手も成功させる力があります。できなさそうなことでも前向きに解決策を考えて取り組むことで解決できたり解決しなくてもそこから多くのことを学ぶことができますよね。&lt;/p&gt;
&lt;h3&gt;2. 一緒にいて成長できる人&lt;/h3&gt;
&lt;p&gt;自分が目指すような能力や人格を持つ人ならやっぱり近くにいたいですね。尊敬する人ならなおさらです。もし尊敬する人と話ができるチャンスがあれば遠慮せず積極的に話をしてみましょう。私を含め遠慮しすぎです。&lt;/p&gt;
&lt;p&gt;また目指すような能力や人格を持つ人が自分より年下の場合も敬意を持って学ぶべきです。つい強がったりひがんだりしてしまわないように気を付けましょう。&lt;/p&gt;
&lt;h3&gt;3. 感謝したい人&lt;/h3&gt;
&lt;p&gt;愚痴を言う人の場にはいるべきではなくても、感謝をしたい仲間や家族であれば話は別です。自分の気持ちが落ち込まない程度なら感謝をもって接したいものです。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;心がマイナスになるだけの飲み会は「浪費」でしかありません。
そのような場所は避けて自分が成長できる場を探しましょう。
行くべき場所を見つけたなら、その取り組みに積極的にかつ誠心誠意に参加し信頼を培いましょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;単純接触効果: 同じ人やものに接する回数が多いほど好印象を持つという現象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これで飲み会はあなたにとって「投資」になります！&lt;/p&gt;</content><category term="ビジネス"></category><category term="ビジネス"></category></entry><entry><title>ITエンジニアが3万円のゲーミング・キーボード買ってみた</title><link href="https://hyunwookpark.github.io/itenziniaga3mo-yuan-nogemingukibodomai-tsutemita.html" rel="alternate"></link><published>2020-09-22T14:16:00+09:00</published><updated>2020-09-22T14:16:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:hyunwookpark.github.io,2020-09-22:/itenziniaga3mo-yuan-nogemingukibodomai-tsutemita.html</id><summary type="html">&lt;p&gt;【ロジクールG913のレビュー】 ITエンジニアのキーボードへのこだわり&lt;/p&gt;</summary><content type="html">&lt;p&gt;衝動買いしました。
いや、以前からエンジニアとして最も利用頻度が高いキーボードは
いいものを買おうと常々思っていたので衝動ではないかもしれませんが、
いいものが見つかったので買っちゃいました。&lt;/p&gt;
&lt;h1&gt;キーボードの概要&lt;/h1&gt;
&lt;h2&gt;logicool Gシリーズ G913 TKL&lt;/h2&gt;
&lt;p&gt;テンキーレス
LIGHTSPEEDワイヤレス
RGBメカニカル
ゲーミング キーボード&lt;/p&gt;
&lt;p&gt;値段: ￥30,250 （税込）&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gaming.logicool.co.jp/ja-jp/products/gaming-keyboards/g913-tkl-wireless.html"&gt;Logicool公式サイト&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;開封の様子&lt;/h2&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/mmuERONHdqk" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;テンキーレスとキー配列&lt;/h1&gt;
&lt;p&gt;ノートパソコンのキーボードは標準的なキー配列とは若干異なるのでこれがかなりのストレスでした。ITエンジニアは「HOME」「END」「Page Up」「Page Down」「DEL」キーを多用しますがほとんどのノートパソコンはこのキーの位置がバラバラでとても使いにくいです。このあたりのキーは感覚で指が動くぐらいになっているので変な場所にあるとまるで使えません。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/notekey.jpg" alt="キーボード比較" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;ノートパソコンのキー配列はプログラミングや作業で本当に不便でした。&lt;/p&gt;
&lt;p&gt;そこで標準的なキー配列の1,000円のキーボードを使っていました。&lt;/p&gt;
&lt;p&gt;私はプログラミングや仕事でテンキーをほとんど使わないのですが、モニターの前に置くときに真ん中に置きたいんです。でもテンキーありキーボードはホームポジションのF/Jキーが全体の左側にずれてしまって若干姿勢が左向きになるんですよね。F/Jキーの位置に合わせてキーボードを若干右側にずらすと右利きのマウス操作にも邪魔だしモニターの真ん中ではなくなる。。この若干のストレスがずっと続いていました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/IMG_4427.jpg" alt="新しいキーボード" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;テンキーがなくなって本当にスッキリしました！&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/IMG_4428.jpg" alt="新しいキーボード" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;よく使うキーの配列も問題ないので自然に操作できます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;右側にもALTキーがあれば完璧です。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;LIGHTSPEEDワイヤレス&lt;/h1&gt;
&lt;p&gt;ITエンジニアでなくてもそうだと思いますが、最近はパソコンの付属品などもあってごちゃごちゃするのでワイヤレスは助かります。&lt;/p&gt;
&lt;p&gt;bluetoothも対応しているけど、より高速にキータイピングに反応できるものらしいです。&lt;/p&gt;
&lt;p&gt;LIGHTSPEEDもbluetoothも反応速度めっちゃ早いので正直違いがわからないです。。。
ゲームでならミリ秒単位の違いが勝敗に影響するのでしょう。&lt;/p&gt;
&lt;h1&gt;バッテリー内蔵&lt;/h1&gt;
&lt;p&gt;これは買ってから気づきましたが、バッテリー内蔵で充電ができます。
フル充電で40時間ぐらいもつそうです。&lt;/p&gt;
&lt;p&gt;充電できなくなったときがこのキーボードとの別れの時なんでしょう。&lt;/p&gt;
&lt;h1&gt;ステンレスで質感が最高&lt;/h1&gt;
&lt;p&gt;キーボード本体はステンレスらしく、つや消しされているので指紋は気になりません。&lt;/p&gt;
&lt;h1&gt;キートップ&lt;/h1&gt;
&lt;p&gt;一見無駄なキラキラ光るキーボードはカッコイイという点もあるけど、私のように暗い中で作業するのが好きな人にはぴったりです。妻には怪しいと言われますが暗い中での作業時に本当に助かります。残念なのは私は日本語の時カナ入力をするのでキートップにカナ表記がない点です。&lt;/p&gt;
&lt;p&gt;キートップはプラスチックでさらっとした触り心地です。&lt;/p&gt;
&lt;h1&gt;キーのプッシュ&lt;/h1&gt;
&lt;p&gt;押し心地がとてもいいです。たとえるのは難しいですが弾力はいいけど力がそんなに要らない感じです。
個人的には押したときのカチカチ音がなければ最高です。&lt;/p&gt;
&lt;h1&gt;重量810g&lt;/h1&gt;
&lt;p&gt;ずっしりと重さがあって安定感があります。&lt;/p&gt;
&lt;h1&gt;最後に&lt;/h1&gt;
&lt;p&gt;ほぼキーボードレビューのようになりましたが、仕事上のわずかなストレスでも一日中使うものなので自分にあった道具にこだわることで気分や能率への影響は大きいですよね。ほぼパソコン触らない日はないので8時間×365日と考えると相当な影響になりそうです。&lt;/p&gt;
&lt;p&gt;キー配列で考えると能率は1,000円のキーボードのときと大差ないかもしれませんが、テンションはまったく違います。&lt;a href="https://gigazine.net/news/20191114-ibm-mac-productivity/"&gt;IBMの発表&lt;/a&gt;によると従業員のPCをMACに切り替えると大幅に生産性と満足度が増加したという報告があるそうです。それと同じ効果！？（笑）&lt;/p&gt;</content><category term="ITエンジニア"></category><category term="ITエンジニア"></category></entry><entry><title>世の中ホンマにせまい。</title><link href="https://hyunwookpark.github.io/shi-nozhong-honmanisemai.html" rel="alternate"></link><published>2020-09-17T21:45:00+09:00</published><updated>2020-09-17T21:45:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:hyunwookpark.github.io,2020-09-17:/shi-nozhong-honmanisemai.html</id><summary type="html">&lt;p&gt;世界のひとはみんな友達！？&lt;/p&gt;</summary><content type="html">&lt;p&gt;「世の中せまい。」とよく言いますが、この一年つくづくせまいなと感じました。&lt;/p&gt;
&lt;h1&gt;SESでいろんな会社を訪問する&lt;/h1&gt;
&lt;p&gt;私はITエンジニアで、SESという業態で長い期間仕事してきました。
SES(System Engineering Service)とは、簡単に言うと「技術力を提供して一緒にシステム開発しますよ」という仕事の仕方です。&lt;/p&gt;
&lt;p&gt;SESという業態について賛否両論ありますが、その話はまたゆっくり今度書くとして。&lt;/p&gt;
&lt;p&gt;この業態はいろんな企業に出向いて、そこでいろんな会社の人たちとチームを組んでシステムを開発します。企業に出向くことを「出向」とも呼びます。
ひとつの企業で「プロジェクト」という単位でシステム開発をするのですが、そのプロジェクトが終わるとそのチームは解散となります。プロジェクトが終わらなくてもやることが減ってきたらチームメンバーは「満了」と言ってそのプロジェクトから抜けて別の企業に行きます。出向先の企業のことを「現場」と呼んだりしますが、人によって程度の差はあれど数ヶ月から数年ぐらいで現場が切り替わることになります。&lt;/p&gt;
&lt;p&gt;すると、&lt;/p&gt;
&lt;p&gt;まるで打ち合わせたかのように以前の現場で一緒だった人が一人や二人いるものです。
業界せまいなと毎回思ってました。&lt;/p&gt;
&lt;p&gt;直近ではないですが経済産業省の「平成３０年 特定サービス産業実態調査報告書」から
「ソフトウェア業、情報処理・提供サービス業及びインターネット附随サービス業」の統計を調べてみました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;都道府県&lt;/th&gt;
&lt;th&gt;事業従事者数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;東京&lt;/td&gt;
&lt;td&gt;327,520人&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大阪&lt;/td&gt;
&lt;td&gt;82,821人&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;思ったより大阪少ないなという感じました。
これは顔見知りにちょくちょく出会ってもおかしくはない気もします。&lt;/p&gt;
&lt;h1&gt;学びの場&lt;/h1&gt;
&lt;p&gt;昨年の1月からいろんな学びの場にも足を運ぶようになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Money and You&lt;/li&gt;
&lt;li&gt;MOVEコーチング&lt;/li&gt;
&lt;li&gt;倫理法人会&lt;/li&gt;
&lt;li&gt;ロバートキヨサキ氏来日セミナー&lt;/li&gt;
&lt;li&gt;鴨頭嘉人さんの話し方の学校(こちらは妻が)&lt;/li&gt;
&lt;li&gt;アンソニーロビンズのUPW(こちらも妻が)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など。&lt;/p&gt;
&lt;p&gt;先日、「倫理法人会」という集まりの勉強会に参加していると先生役の方と一緒に来てくださった方は、妻が行った「話し方の学校」で一緒に学んでいた同期の方だったんです。私が記念に一緒に撮った写真を妻が見て「なんで一緒にいるの？」とびっくりしていました。&lt;/p&gt;
&lt;p&gt;その方以外にも別の学びの場で知った人が他の学びの場の友達の友達ということは本当に多かったんです。&lt;/p&gt;
&lt;h1&gt;実はみんな友達？&lt;/h1&gt;
&lt;p&gt;「友達の友達の友達の・・・と10回繰り返すとどんな人にでも出会える」という話を聞いたことがあります。
「友達100人できるかな～♪」を参考に1人あたり100人友達がいるとすれば、そのつながりは100人の10乗=100000000000000000000(1垓[がい])というとんでもない数字になるわけですね。&lt;/p&gt;
&lt;p&gt;これを考えると怖くなってきませんか？
一部の場で取り繕ったことなんてこのせまい世の中では筒抜けということになりませんか。
facebookには"共通の友達"という機能があって自分の友達が自分の別の友達とつながっているかどうかがわかるのですが、この一年でどんどんそういう人が増えるのを見てドキッとました。&lt;code&gt;いかに信頼を積み上げることが大事か&lt;/code&gt;を見せつけられたような感じがしました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自分のひとつひとつの行動は信頼に値するものなのか。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;「一期一会」という言葉がありますよね。wikipediaで調べてみると、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;茶会に臨む際には、その機会は二度と繰り返されることのない、一生に一度の出会いであるということを心得て、亭主・客ともに互いに誠意を尽くす心構えを意味する。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ということだそうです。&lt;/p&gt;
&lt;p&gt;私の気づきからすると、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;その出会いはまた出会う誰かとつながっているので「気をつけなはれや」！もとい、ひとつひとつの出会いを大切にして誠意を尽くしましょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;となります。(笑)&lt;/p&gt;</content><category term="ビジネス"></category><category term="ビジネス"></category><category term="IT業界"></category></entry><entry><title>担当エンジニアがいなくなってしまった</title><link href="https://hyunwookpark.github.io/dan-dang-enziniagainakunatsuteshimatsuta.html" rel="alternate"></link><published>2020-09-15T13:00:00+09:00</published><updated>2020-09-15T13:00:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:hyunwookpark.github.io,2020-09-15:/dan-dang-enziniagainakunatsuteshimatsuta.html</id><summary type="html">&lt;p&gt;システムを作ってもらったエンジニアがいなくなってしまって保守ができなくなった！？私が「システムを売らないシステム屋」を目指す理由。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;先日参加した経営者団体の集まりに参加した際、ある会社の社長とこんな話をしました。&lt;/h2&gt;
&lt;p&gt;Yさん:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;システム作ってもらったエンジニアが飛んでしまって、他の業者に頼んだら「他の人が作ったものはメンテナンスできません」っていうねん。そんなエンジニアおかしくない？でもあれは嘘やねん。そのあとメンテナンスしてくれる人見つけてん。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;おっしゃるお気持ちはとてもよくわかります。ただ、そのシステムの状態によるとは思います。ひどいシステムはメンテナンスが難しいのも事実です。過去にも2ヶ月かけても動かない機能を別のエンジニアがまるっと捨てて作り直したら2週間で正しく動いたことがありました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yさん:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;あなたの会社は人が作ったけど他の業者がやってくれないのをメンテナンスしてあげるのはどない？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なるほど。。(正直、人のスパゲッティコード見るのは嫌だ・・・作り直したくなる・・・と心の中で叫んでました)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yさん:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;次からはしっかり設計書を書いてくれる業者に頼むことにするわ。担当の人が飛んでも設計書があればメンテナンスできるでしょ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;そうですね。設計書がしっかり書かれていれば使えますね。残念ながら、実際には設計書もあてにはならず、設計書がプログラムと同期してしっかりメンテナンスされていることは実状としては少ないです。システムエンジニアは結局動いているプログラムのソースコードを解析することになります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;もう！じゃ、どうしたらいいの？&lt;/h1&gt;
&lt;p&gt;とYさんは思ったことでしょう。&lt;/p&gt;
&lt;p&gt;話している私としても問題だらけだなと感じました。（反省）&lt;/p&gt;
&lt;p&gt;この会話だけに多くの問題がありますが今回は以下の点について考えてみます。&lt;/p&gt;
&lt;h1&gt;問題1. 担当エンジニアがいなくなる&lt;/h1&gt;
&lt;p&gt;担当者は変わるものですよね。特に個人もしくは一人社長の場合、その代わりをできる人はいないのでなおさらです。
個人に発注すべきではないということではなく、そのメリット・デメリットを把握すべきです。&lt;/p&gt;
&lt;p&gt;いち個人にシステム開発を依頼する場合のメリット・デメリットを挙げてみます。&lt;/p&gt;
&lt;h3&gt;メリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;金額が平均して安価な傾向&lt;/li&gt;
&lt;li&gt;融通が利く&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デメリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;その人がいないとすべてが止まる(属人性の高さ)&lt;/li&gt;
&lt;li&gt;対応スピードに限界がある&lt;/li&gt;
&lt;li&gt;知識に偏りがある&lt;/li&gt;
&lt;li&gt;技術力の個人差がある(当然)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的な意見としては絶対に安く発注することが最優先でない限り個人に発注するべきではないと考えます。&lt;/p&gt;
&lt;p&gt;では企業に発注すれば安心していいのでしょうか。企業としても同じ人をいつまでもひとつの案件に配属させられるわけではありません。
むしろいろんなシステムを経験してもらうべく担当は変えるものです。
会社の体制としても特定の人に依存してしまう属人化が問題となっていたりします。
また担当者が変わってしまって以前のようにスムーズに進まないと感じた発注者も多くいることでしょう。
会社としては担当が変わっても対応できる体制を取るので個人よりは安心感はあると思います。&lt;/p&gt;
&lt;p&gt;しかし会社がいつまでも残っているとは限りません。&lt;/p&gt;
&lt;p&gt;発注側もそのことを考慮に入れて発注したり監査する必要があります。
特に発注側はシステムのことに詳しくないことが多いので意識して見ないと驚く結果になる場合もあります。&lt;/p&gt;
&lt;p&gt;知り合いのITエンジニアに第三者からの助言をもらうのもいいでしょう。&lt;/p&gt;
&lt;h1&gt;問題2. 設計書がメンテナンスされない&lt;/h1&gt;
&lt;p&gt;冒頭のYさんは製造業の方なので、そのイメージだと製造物は設計書通りにできているのが当然という認識があるのだと思います。正論をいうと確かにそうですね。&lt;/p&gt;
&lt;p&gt;改めて考察してみます。&lt;/p&gt;
&lt;h3&gt;なぜシステムは設計書がメンテナンスされないのか&lt;/h3&gt;
&lt;p&gt;システムエンジニアはズボラだからなのか？いや、それだと業界全体がズボラということになります。そんなズボラな業界のまま何十年と過ごすわけはないですね。&lt;/p&gt;
&lt;p&gt;私なりに原因を考えてみました。&lt;/p&gt;
&lt;h4&gt;考察1: 常に変化するから&lt;/h4&gt;
&lt;p&gt;設計はお客様の要望を資料にしたものです。下流に行くにつれてその要望をプログラムとして表現するための内容になります。&lt;/p&gt;
&lt;p&gt;設計書といっても要望がプログラムになるまでにいろんな粒度で表現されます。
「要件定義書」→「基本設計書」→「詳細設計書」を中心に他にもいろんな資料が存在します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;業務フロー図&lt;/li&gt;
&lt;li&gt;ER図&lt;/li&gt;
&lt;li&gt;テスト仕様書&lt;/li&gt;
&lt;li&gt;標準化資料&lt;/li&gt;
&lt;li&gt;テスト仕様書&lt;/li&gt;
&lt;li&gt;各種方針資料&lt;/li&gt;
&lt;li&gt;各種一覧表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;かなり膨大です。これらを正しく書くだけで1年はかかります。&lt;/p&gt;
&lt;p&gt;これらをもとにプログラムを作っていますが、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;なんと&lt;/strong&gt; 要望は日々変わるんです。理由は勘違い・伝え間違い・忘れていた・単純な間違いなど様々です。またもの凄いスピードが変化する社会にビジネスが変化するのも当然のことでしょう。&lt;/p&gt;
&lt;p&gt;さらに実際にプログラムを作ってみると思い通りに動かないことが毎日・毎時間のように発生します。どんな優秀なSEでもすべてのことを考慮して一つのミスもなく設計をすることはできません。実際に作ってみたことをもとに設計書を修正することになりますが、要因によっては上流の資料に遡ってすごい数の資料を修正することになります。&lt;/p&gt;
&lt;p&gt;労力をかければプログラムと設計書をほぼ同期させることはできるでしょう。プログラムの一部を修正するだけでもすごい労力ですが、それに紐づく資料をミス・漏れなくメンテナンスすることにどれだけの工数がかかるでしょう。それは開発費としてお客様に影響します。&lt;/p&gt;
&lt;p&gt;エンジニアとしてはこの影響が極力少なくなるように、無駄な設計書のメンテナンスに力を入れずに保守に必要な重要な資料を可能な限り自動化でメンテナンスするように努力必要ですね。&lt;/p&gt;
&lt;h4&gt;考察2: 一品ものだから&lt;/h4&gt;
&lt;p&gt;設計書を作って製造するものはなにが想像できるでしょう。まず私が思いついたのは自動車ですね。いろんな研究や試行錯誤を繰り返して設計して製造ラインなど工場で大量生産します。&lt;/p&gt;
&lt;p&gt;それに比べて業務システムやWebサイトなどは毎回が一品もののオーダーメイドです。だからどうせ工数かけまくってメンテナンスしてもという気持ちが働くからではないかなと思います。&lt;/p&gt;
&lt;p&gt;設計書をもとに何万個も作られるとしたら気軽には設計書を書かないはずです。オリジナルのシステムにとって設計書は不具合や変更がない限り一度プログラムを書くだけのために書かれる資料です。もちろん不具合や変更は必ずあるのでどこかしらの設計書は有効に使われるでしょう。でも膨大な資料がすべて使われることはないので保険にどこまでお金をかけるかという話になりそうです。しかも修正するのはプログラムなのでプログラムを解析すればわかる話です。&lt;/p&gt;
&lt;p&gt;じゃ、資料はどれも残す必要がないのかというと、そうではありません。プログラムを解析するにも時間がかかるのでその道しるべになる資料は時間がかかってもメンテナンスしておくべきですね。&lt;/p&gt;
&lt;p&gt;たとえば以下のようなものが効果的でしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;業務フロー図&lt;/li&gt;
&lt;li&gt;ER図&lt;/li&gt;
&lt;li&gt;CRUD図&lt;/li&gt;
&lt;li&gt;機能一覧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にもあると思いますが、これらは担当者が変わったときにプログラムを解析するための道しるべになるでしょう。&lt;/p&gt;
&lt;p&gt;これは想像ですが、携帯電話やゲームやカーナビシステムやパッケージソフトなど大量生産するプログラムはもっと設計書もしっかり残しているのではないでしょうか。それだけ開発費用も高額ですが。&lt;/p&gt;
&lt;h4&gt;考察3: プログラムそのものが設計だから&lt;/h4&gt;
&lt;p&gt;これは若干屁理屈のようにも聞こえるかもしれませんが、プログラムというのは実際にはコンピュータ上に動く機能を実行させるための設計書であるとも言えます。&lt;/p&gt;
&lt;p&gt;プログラムという設計書を正しく書いておくことで正しく機能するというこですね。&lt;/p&gt;
&lt;p&gt;では利用者が求める機能を聞いただけでプログラムを書くことができて、プログラムを見るだけで機能が把握できるなら設計書は不要ですね。&lt;/p&gt;
&lt;p&gt;私も設計書がほとんど要らないシステム開発を目指して改善を重ねている最中です。&lt;/p&gt;
&lt;h1&gt;結局どうしたらいいの？&lt;/h1&gt;
&lt;p&gt;発注するときは以下のような考慮をしてくれる業者に依頼してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;短期間に区切って早期に動くものを見せてくれる&lt;/li&gt;
&lt;li&gt;効率化をはかり自動化に取り組んでいること&lt;/li&gt;
&lt;li&gt;新しい技術を積極的に使って利用技術の老朽化を避けている&lt;/li&gt;
&lt;li&gt;長期の保守を想定している&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;この件はいずれまた言及したいと思います。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;私が目指すもの&lt;/h1&gt;
&lt;h2&gt;「システムを売らないシステム屋」&lt;/h2&gt;
&lt;p&gt;担当者は変わるものです。&lt;/p&gt;
&lt;p&gt;では本当にお客様にとっていい方法とはなにかと考えました。
現時点の私の結論は&lt;code&gt;システムを売らないシステム屋&lt;/code&gt;です。システムを作って納品するのではなく、システムを作れる人を各企業内に育てるのです。
未経験者や経験が不足している人が社内のシステムを作るには数々の難関があるでしょう。私たちはそれをサポートするんです。
業務のことを最もわかっているお客様の社員がシステムを作れるようになれば、お客様が開発に関わってくれないという問題も解決する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1企業1システムエンジニア作戦&lt;/code&gt;です。いまや、ITを利用しないビジネスはないとも言われます。農業もAIを導入している時代です。本当は各企業にシステムに詳しい人が一人ぐらいはほしいはず。&lt;/p&gt;
&lt;p&gt;私の目指すシステム開発とエンジニア教育が一気にできるチャンス！&lt;/p&gt;
&lt;p&gt;Yさんには本当に感謝です。&lt;/p&gt;</content><category term="システム開発"></category><category term="システム開発"></category><category term="システム保守"></category></entry><entry><title>サイトへのアクセス数見てますか？</title><link href="https://hyunwookpark.github.io/saitohenoakusesushu-jian-temasuka.html" rel="alternate"></link><published>2020-09-14T16:13:00+09:00</published><updated>2020-09-14T16:13:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:hyunwookpark.github.io,2020-09-14:/saitohenoakusesushu-jian-temasuka.html</id><summary type="html">&lt;p&gt;ウェブサイトやブログは作ったけど、どのぐらい見てくれているのかはよくわからない。アクセス数、気にしなくて大丈夫ですか？&lt;/p&gt;</summary><content type="html">&lt;h1&gt;あなたのサイトには毎月どのぐらいアクセス数はいくら？&lt;/h1&gt;
&lt;p&gt;マーケティングの観点からもアクセスの分析は有効です。&lt;/p&gt;
&lt;p&gt;例えばあなたのサイトに無料体験申込のページがあるとしましょう。
サイトへのアクセス数とサイト内の無料体験申込の比率を知ることで、単純に言えばアクセス数を2倍にすることで申込が2倍になる可能性があります。
またアクセス数は多いけど無料体験申込が極端に少ない場合、無料体験申込への誘導が悪かったり無料体験自体に魅力がないなどどこを改善すべきか絞り込むことができるわけです。&lt;/p&gt;
&lt;p&gt;様々な要因があって机上の計算通りにはいきませんが、問題や改善するための材料になることは間違いありません。
まずは各タイミングの数を知ることからはじめて、お客様の気持ちを知りましょう。&lt;/p&gt;
&lt;h1&gt;Google Analytics&lt;/h1&gt;
&lt;p&gt;手軽にサイトへのアクセスを確認できるものとしてGoogle Analyticsがあります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="google analytics" src="https://hyunwookpark.github.io/images/logo_lockup_analytics_icon_vertical_black_2x.png"&gt;&lt;/p&gt;
&lt;p&gt;https://analytics.google.com/&lt;/p&gt;
&lt;p&gt;例として、私のqiitaの投稿に対するアクセス数のグラフを掲載します。
これは2年間のアクセス数の推移ですが、徐々に上がって最近は停滞していることがわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-myqiita-1.png" alt="qiitaのアクセス" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;またこちらを見ると平日の業務時間あたりにアクセスが集中していることがわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-myqiita-2.png" alt="qiitaのアクセス" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;さらにどのページが人気なのかもわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-myqiita-3.png" alt="qiitaのアクセス" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;他にも検索エンジンから来たのか直接ブックマークなどから来たのか、どの国からのアクセスが多いのか、など色んなことがわかります。&lt;/p&gt;
&lt;h1&gt;Google Analytics 導入手順&lt;/h1&gt;
&lt;p&gt;導入手順を軽く確認しておきます。&lt;/p&gt;
&lt;h3&gt;ログイン&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Google Analyticsを利用するためにはGoogleのメールアドレスが必要です。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下のページアクセスして、Googleのメールアドレスでログインしてください。&lt;/p&gt;
&lt;p&gt;https://analytics.google.com/&lt;/p&gt;
&lt;h3&gt;用語説明&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用語&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;アカウント&lt;/td&gt;
&lt;td&gt;Googleアカウント(メールアドレス)とは別のもので管理するサイト単位の名前のこと&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;トラッキングID&lt;/td&gt;
&lt;td&gt;サイトのアクセスを追跡するために割り振られるID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;アカウントの追加&lt;/h3&gt;
&lt;p&gt;左下の「管理」のボタンを押して、「アカウント作成」を選ぶ。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-01.png" alt="手順1" class="img-fluid"&gt;
&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-00.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;アカウント名を入力して「次へ」を押す。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-02.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;通常のWebサイトなら「ウェブ」を選択して「次へ」を押す。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-03.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;サイト名やURLを入力し「作成」を押す。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-04.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;利用規約を確認する。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-05.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;
&lt;p&gt;トラッキング情報を確認してサイトに貼り付ける。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://hyunwookpark.github.io/images/google_anlytics-06.png" alt="手順1" class="img-fluid"&gt;&lt;/p&gt;</content><category term="ウェブサイト"></category><category term="ウェブサイト"></category><category term="ブログ"></category></entry><entry><title>ブログ始めます</title><link href="https://hyunwookpark.github.io/burogushi-memasu.html" rel="alternate"></link><published>2020-09-14T16:00:00+09:00</published><updated>2020-09-14T16:00:00+09:00</updated><author><name>HyunwookPark</name></author><id>tag:hyunwookpark.github.io,2020-09-14:/burogushi-memasu.html</id><summary type="html">&lt;p&gt;自己紹介とブログをはじめた理由、エンジニアらしい？ブログ管理についてもふれています。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;自己紹介&lt;/h1&gt;
&lt;p&gt;はじめまして。朴 玄旭(박 현욱 ぱく ひょぬ) です。&lt;/p&gt;
&lt;p&gt;10歳に日本に来た韓国人です。&lt;code&gt;Planaria Inc.&lt;/code&gt;というIT会社を経営しています。
現役でシステムエンジニアもやっていてエンジニア歴は17年ほどです。&lt;/p&gt;
&lt;p&gt;連絡はブログ内のアイコンのfacebookかtwitterからどうぞ。&lt;/p&gt;
&lt;h1&gt;なぜブログはじめたのか&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://qiita.com/HyunwookPark"&gt;qiita&lt;/a&gt;にはちょくちょく投稿していますが、
技術ネタ以外はちょっと書きづらいのでこちらで発信してみることにしました。&lt;/p&gt;
&lt;p&gt;IT企業以外の人向けにシステムやITのことを知ってもらって、
ビジネスの効率化やシステム導入するときに参考になる情報を発信していきます。&lt;/p&gt;
&lt;p&gt;プログラミングに興味がある人やエンジニアを目指す人のための情報も発信する予定です。&lt;/p&gt;
&lt;p&gt;エンジニア・経営者として普段思ったことや考え、また日々の仕事のことも公開範囲で残していこうと思います。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;このブログでの内容は個人的な見解で所属する会社や団体とは関係ありません。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;どんなことを書くのか&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;IT技術&lt;/li&gt;
&lt;li&gt;ビジネス関連&lt;/li&gt;
&lt;li&gt;システム開発&lt;/li&gt;
&lt;li&gt;教育&lt;/li&gt;
&lt;li&gt;心&lt;/li&gt;
&lt;li&gt;お金のこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ブログの管理&lt;/h1&gt;
&lt;p&gt;Python製の&lt;a href="https://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;というツールでMARKDOWNをHTMLに変換してGitHubにアップすることにしました。
普段からメモはMARKDOWNで残しているのでMARKDOWNを使いたかったです。
「なんということでしょう！普段のメモがそのままブログに！」という感じです。
MARKDOWNだけで管理しているので、まとめて一括に編集することも可能だしサーバ引っ越しも簡単です。
WordPressなどのCMSで管理するのもいいですが、ちょっとエンジニアぽくてかっこいいじゃないですか。&lt;/p&gt;</content><category term="ブログ"></category><category term="ブログ"></category></entry></feed>